#!/usr/bin/env python3
"""
AIxBlock Vulnerability Reporter
Automates the creation of vulnerability reports and GitHub issues
"""

import json
import os
import datetime
from pathlib import Path

class VulnerabilityReporter:
    def __init__(self, config_path="config/testing_config.json"):
        self.config_path = config_path
        self.load_config()
        
    def load_config(self):
        """Load testing configuration"""
        try:
            with open(self.config_path, 'r') as f:
                self.config = json.load(f)
        except FileNotFoundError:
            print(f"Config file not found: {self.config_path}")
            self.config = {}
            
    def calculate_cvss_score(self, attack_vector, attack_complexity, privileges_required, 
                           user_interaction, scope, confidentiality, integrity, availability):
        """Calculate CVSS v3.1 score"""
        # Simplified CVSS calculation - use online calculator for precise scoring
        base_scores = {
            'attack_vector': {'network': 0.85, 'adjacent': 0.62, 'local': 0.55, 'physical': 0.2},
            'attack_complexity': {'low': 0.77, 'high': 0.44},
            'privileges_required': {'none': 0.85, 'low': 0.62, 'high': 0.27},
            'user_interaction': {'none': 0.85, 'required': 0.62},
            'scope': {'unchanged': 0, 'changed': 0},
            'confidentiality': {'high': 0.56, 'low': 0.22, 'none': 0},
            'integrity': {'high': 0.56, 'low': 0.22, 'none': 0},
            'availability': {'high': 0.56, 'low': 0.22, 'none': 0}
        }
        
        # This is a simplified calculation - use proper CVSS calculator
        impact = (confidentiality + integrity + availability) / 3
        exploitability = (attack_vector * attack_complexity * privileges_required * user_interaction)
        
        if scope == 'changed':
            base_score = min(10, (impact * 1.08 + exploitability) * 1.2)
        else:
            base_score = min(10, impact + exploitability)
            
        return round(base_score, 1)
        
    def determine_severity(self, cvss_score):
        """Determine severity level based on CVSS score"""
        if cvss_score >= 9.0:
            return "CRITICAL"
        elif cvss_score >= 7.0:
            return "HIGH"
        elif cvss_score >= 4.0:
            return "MEDIUM"
        else:
            return "LOW"
            
    def estimate_reward(self, severity):
        """Estimate potential reward based on severity"""
        thresholds = self.config.get('vulnerability_thresholds', {})
        severity_lower = severity.lower()
        
        if severity_lower in thresholds:
            cash = thresholds[severity_lower].get('reward_cash', 0)
            tokens = thresholds[severity_lower].get('reward_tokens', 0)
            return cash, tokens
        
        return 0, 0
        
    def create_vulnerability_report(self, vuln_data):
        """Create a formatted vulnerability report"""
        
        # Calculate CVSS and severity
        cvss_score = vuln_data.get('cvss_score', 0.0)
        severity = self.determine_severity(cvss_score)
        cash_reward, token_reward = self.estimate_reward(severity)
        
        # Generate report content
        report_content = f"""# Vulnerability Report: {vuln_data['title']}

## 🔍 Basic Information

**Vulnerability Title**: {vuln_data['title']}  
**Reporter**: {vuln_data.get('reporter', 'Security Researcher')}  
**Date Discovered**: {datetime.date.today().strftime('%Y-%m-%d')}  
**Affected System**: {vuln_data.get('affected_system', 'app.aixblock.io')}  

## 📊 Severity Assessment

**CVSS v3.1 Score**: {cvss_score}  
**Severity Level**: {severity}  
**Estimated Reward**: ${cash_reward} + {token_reward} AXB tokens  

## 🎯 Vulnerability Details

### Vulnerability Type
{vuln_data.get('vulnerability_type', 'Not specified')}

### Affected Components
**URL/Endpoint**: `{vuln_data.get('endpoint', 'https://app.aixblock.io/vulnerable-endpoint')}`  
**HTTP Method**: {vuln_data.get('http_method', 'GET')}  
**Parameter(s)**: {vuln_data.get('parameters', 'Not specified')}  
**Authentication Required**: {vuln_data.get('auth_required', 'Yes')}  

### Root Cause
{vuln_data.get('root_cause', 'Root cause analysis pending')}

## 🔄 Reproduction Steps

{vuln_data.get('reproduction_steps', '''
1. Login to https://app.aixblock.io
2. Navigate to vulnerable endpoint
3. Submit malicious payload
4. Observe vulnerability execution
''')}

## 💥 Proof of Concept

### Request/Response Examples
```http
{vuln_data.get('poc_request', 'POST /api/vulnerable-endpoint HTTP/1.1\\nHost: api.aixblock.io\\nContent-Type: application/json\\n\\n{"malicious": "payload"}')}
```

```http
{vuln_data.get('poc_response', 'HTTP/1.1 200 OK\\nContent-Type: application/json\\n\\n{"vulnerable": "response"}')}
```

### Exploit Code
```python
{vuln_data.get('exploit_code', '''#!/usr/bin/env python3
import requests

def exploit():
    url = "https://api.aixblock.io/vulnerable-endpoint"
    payload = {"malicious": "data"}
    response = requests.post(url, json=payload)
    print(f"Exploit result: {response.text}")

exploit()''')}
```

## 📈 Impact Assessment

### Confidentiality Impact
**Level**: {vuln_data.get('confidentiality_impact', 'High')}  
**Description**: {vuln_data.get('confidentiality_description', 'Sensitive data exposure possible')}

### Integrity Impact  
**Level**: {vuln_data.get('integrity_impact', 'High')}  
**Description**: {vuln_data.get('integrity_description', 'Data modification possible')}

### Availability Impact
**Level**: {vuln_data.get('availability_impact', 'Low')}  
**Description**: {vuln_data.get('availability_description', 'Limited service disruption')}

## 🛠️ Proposed Fix

### Immediate Mitigation
{vuln_data.get('immediate_fix', 'Implement input validation and sanitization')}

### Long-term Solution
{vuln_data.get('longterm_fix', 'Comprehensive security review and code refactoring')}

### Code Implementation
```python
{vuln_data.get('fix_code', '''# BEFORE (Vulnerable Code)
def vulnerable_function(user_input):
    return execute_query(f"SELECT * FROM users WHERE id = {user_input}")

# AFTER (Fixed Code)  
def secure_function(user_input):
    if not isinstance(user_input, int) or user_input <= 0:
        raise ValueError("Invalid input")
    return execute_query("SELECT * FROM users WHERE id = %s", (user_input,))''')}
```

## ✅ Fix Verification

### Testing Steps
1. Apply the proposed fix
2. Attempt to reproduce the original vulnerability
3. Verify the fix prevents exploitation
4. Test normal functionality
5. Check for regression issues

---

**Report Created**: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Status**: Draft - Ready for submission
"""
        
        return report_content
        
    def save_report(self, report_content, vulnerability_title, severity):
        """Save vulnerability report to appropriate directory"""
        
        # Create filename
        date_str = datetime.date.today().strftime('%Y-%m-%d')
        filename = f"{date_str}-{vulnerability_title.lower().replace(' ', '-')}.md"
        
        # Determine directory based on severity
        severity_dir = f"research/findings/{severity.lower()}"
        os.makedirs(severity_dir, exist_ok=True)
        
        # Save file
        filepath = os.path.join(severity_dir, filename)
        with open(filepath, 'w') as f:
            f.write(report_content)
            
        print(f"Vulnerability report saved: {filepath}")
        return filepath
        
    def generate_github_issue_template(self, vuln_data):
        """Generate GitHub issue template for submission"""
        
        cvss_score = vuln_data.get('cvss_score', 0.0)
        severity = self.determine_severity(cvss_score)
        
        issue_template = f"""**🔍 Vulnerability Title**: {vuln_data['title']}

**📊 Severity**: {severity} (CVSS {cvss_score})

**🎯 Affected Component**: {vuln_data.get('affected_system', 'app.aixblock.io')}

**🔄 Reproduction Steps**:
{vuln_data.get('reproduction_steps', '1. Step 1\\n2. Step 2\\n3. Step 3')}

**💥 Impact**: 
{vuln_data.get('impact_summary', 'Brief impact description')}

**📸 Proof of Concept**:
{vuln_data.get('poc_summary', 'PoC details and screenshots')}

**🛠️ Proposed Fix**:
{vuln_data.get('fix_summary', 'Recommended remediation approach')}

**📋 Additional Information**:
- Discovered by: {vuln_data.get('reporter', 'Security Researcher')}
- Date: {datetime.date.today().strftime('%Y-%m-%d')}
- Testing methodology: {vuln_data.get('methodology', 'Manual security testing')}

---
*This vulnerability was discovered as part of the AIxBlock Bug Bounty Program. Full technical details and fix implementation will be provided in the associated Pull Request.*
"""
        
        return issue_template
        
    def create_full_report(self, vuln_data):
        """Create complete vulnerability report and GitHub issue template"""
        
        # Generate full report
        report_content = self.create_vulnerability_report(vuln_data)
        
        # Determine severity and save
        cvss_score = vuln_data.get('cvss_score', 0.0)
        severity = self.determine_severity(cvss_score)
        report_path = self.save_report(report_content, vuln_data['title'], severity)
        
        # Generate GitHub issue template
        issue_template = self.generate_github_issue_template(vuln_data)
        
        # Save GitHub issue template
        issue_filename = f"github-issue-{vuln_data['title'].lower().replace(' ', '-')}.md"
        issue_path = os.path.join("research/findings", issue_filename)
        with open(issue_path, 'w') as f:
            f.write(issue_template)
            
        print(f"GitHub issue template saved: {issue_path}")
        
        return {
            'report_path': report_path,
            'issue_path': issue_path,
            'severity': severity,
            'cvss_score': cvss_score
        }

def main():
    """Example usage of the vulnerability reporter"""
    
    reporter = VulnerabilityReporter()
    
    # Example vulnerability data
    example_vuln = {
        'title': 'IDOR in Organization Settings API',
        'reporter': 'Security Researcher',
        'affected_system': 'api.aixblock.io',
        'cvss_score': 7.5,
        'vulnerability_type': 'Insecure Direct Object Reference (IDOR)',
        'endpoint': 'https://api.aixblock.io/organizations/{id}/settings',
        'http_method': 'GET',
        'parameters': 'organization_id',
        'auth_required': 'Yes',
        'root_cause': 'Insufficient authorization checks allow users to access other organizations settings',
        'reproduction_steps': '''1. Login to AIxBlock platform
2. Intercept GET request to /api/organizations/{your_org_id}/settings
3. Change organization ID to different value (e.g., increment by 1)
4. Forward request and observe unauthorized data access''',
        'impact_summary': 'Unauthorized access to organization settings and member information',
        'poc_summary': 'Modified organization ID in API request grants access to other organizations data',
        'fix_summary': 'Implement proper authorization checks to verify user has access to requested organization'
    }
    
    # Create report
    result = reporter.create_full_report(example_vuln)
    
    print(f"Report created successfully!")
    print(f"Severity: {result['severity']}")
    print(f"CVSS Score: {result['cvss_score']}")
    print(f"Report file: {result['report_path']}")
    print(f"GitHub issue template: {result['issue_path']}")

if __name__ == "__main__":
    main()